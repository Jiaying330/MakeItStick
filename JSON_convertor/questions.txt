network
Describe the process when user visit a website
What is the purpose of a DNS request?
What does TCP ensure during data transmission?
What role does IP play in the TCP/IP protocol?
What is the main difference between HTTP and HTTPS?
Describe the process of an HTTP/HTTPS request and response.
What are HTTP methods?
What are RESTful API design principles?
local storage vs session storage vs cookies
Status code


html
What is HTML?
What is the basic structure of an HTML document?
Differentiate between inline and block elements in HTML
What is DOCTYPE!
What is semantic html?
How do you use svg in html? SVG vs Canvas
What is a meta tag?
What are some HTML5 new features
What is critical rendering path
Web components
Shadow DOM vs Real DOM vs Virtual DOM
JSX vs HTML
Image tag
Object-fit

css
What is CSS
What is the meaning of ‘Cascading’ in Cascading Style Sheet?
Explain Media Queries in CSS
Describe the different types of CSS selectors. Provide examples of each.
Explain the concept of the cascade in CSS. How does the order of CSS rules affect the styling of elements?
Explain box-model in CSS
What is the purpose of z-index property in CSS?
Explain different ways to display an element at the center of the web page.
Compare and contrast the content-box and border-box models. How do they affect the calculation of an element’s dimensions?
How are padding and border included in the width and height calculations of an element in each box model?
Describe the differences between static, relative, absolute, fixed, and sticky positioning in CSS. Provide examples of when each type would be used.
What are pseudo classes and pseudo elements in CSS?
Explain the main concepts of Flexbox and Grid layout systems in CSS. How do they differ in terms of use cases?
What is the BEM methodology in CSS? How does it help in organizing and maintaining CSS code?

javascript
Explain what it means that JavaScript is an interpreted language. How does this affect the execution of JavaScript code?
Describe how JavaScript uses prototypes for inheritance. Provide an example.
What are first-class functions in JavaScript? How does this feature affect the way functions can be used?
Compare and contrast var, let, and const in terms of scope, hoisting, redeclaration, and reassignment.
What are the rules for naming variables in JavaScript?
List and describe the primitive data types in JavaScript. Provide examples of each.
What are objects in JavaScript? Provide examples of different types of objects.
Explain the use of the alert, prompt, and confirm functions. Provide examples of how each can be used.
Describe null and undefined
How does type conversion work in JavaScript? What are some common "falsy" values?
Describe how the || (logical OR), && (logical AND), and ?? (nullish coalescing) operators work in JavaScript. Provide examples.
Compare function declarations, function expressions, and arrow functions. Provide examples of each.
What are the advantages and disadvantages of using arrow functions?
What is the event loop in JavaScript? How does it handle asynchronous operations?
Explain lexical scoping and the scope chain in JavaScript. Provide examples to illustrate how they work.
What is hoisting in JavaScript? How does it affect the behavior of variables and functions?
Describe how the this keyword works in different contexts: method calls, simple function calls, arrow functions, and event listeners. Provide examples.
How do call, apply, and bind methods affect the value of this in JavaScript functions?
What are some of the key features introduced in ES6 (ECMAScript 2015)? 
Different ways to create objects in JS?
Different ways to implement class in JS?
How do classes in ES6 differ from traditional function-based object creation in JavaScript?
What is a closure in JavaScript? How does it work, and why is it useful? Provide an example.
How are objects and prototypes used in JavaScript to achieve inheritance? Provide an example.
Explain the role of the constructor function and class syntax in ES6. How do they facilitate object creation and inheritance?
Describe the concepts of encapsulation, abstraction, and polymorphism in the context of JavaScript. Provide examples of how each can be implemented.
What are rest parameters in JavaScript? Provide an example of how they are used.
Explain how to perform a deep copy of an object in JavaScript. Provide examples using both custom functions and external libraries.
Difference betweein __proto__, [[Prototype]], and prototype
What is strict mode
What are callback functions in JavaScript?
What is callback hell and how to avoid it?
Explain Promises in JavaScript.
How do you handle promises
How do then, catch, and finally methods work with Promises?
What is the use of async await in JavaScript?
Compare then with async await
Explain Promise.all()
Explain Promise.allSettled();
What is the difference between instance methods and static methods?
How does Javascript handle concurrency?
What is async/await? How does it differ from using the promise instance methods?
Can you use await outside of an async function?
What is callback hell and why is it considered a problem?

typescript
What is TypeScript?
Why TypeScript?
What is any type? When to use it?
What is void type? When to use it?
What is unknown type? When to use it?
What is never type? When to use it?
Provide the syntax for a function with the type annotations
Provide the syntax for an object with the type annotations
How to specify optional properties in TypeScript?
What is enum in TypeScript?
What is tuple in TypeScript?
What are type aliases in TypeScript? How do you create one?
How do you do parameter destructuring?
What are intersection types in TypeScript?
What are union types in TypeScript?
What are abstract classes? When should you use one?
How to make object properties immutable in TypeScript?
What is a type declaration file?
Explain the purpose of the “in” operator
What is an interface?
What are the “implements” clauses in TypeScript?
What are string literal types?
What are utility types in TypeScript? List some and explain their usage
Explain the various ways to control member visibility in TypeScript
What is type inference?
What is contextual typing?
What is Generic in TypeScript?
What are type assertion in TypeScript?

react
What is JSX?
What is React virtual dom?
What is reconciliation?
What is a react element?
What is a react component?
What is the difference between state and props?
What’s the difference between class and function components?
How to trigger rerender in a component
Why do you like react over other libraries and frameworks?
What are higher order components?
What are pure components?
Advantage of using react hooks?
What does the term mounted mean in react?
What does useState do?
What does useEffect do? What is a dependency array?
What is useRef used for? How is it different from useState?
What are synthetic events?
Can you explain what is the role of reducers?
What is react router? How is that different from conventional routing?
How do you apply validation on props in react?
Controlled component vs uncontrolled component difference?
What is prop drilling?
Any limitations that you have with react?
What does React.memo do? How do we use it?
What is React.PureComponent
How to prevent components from unnecessary rerendering?
What is code splitting and lazy loading?
What is server side rendering?

redux
Why do we use redux?
Difference between redux and useContext API?
What is the store?
What is a reducer?
What is dispatch?
What is the flux pattern?
How do you use the state from redux? (class & func)
What is redux middleware?


behavioral
have you participated in initiation of a project (techstack, boilerplate, goal analysis, stakeholder)
how do you manage restful api connection
Do you prefer typescript or javascript, why?
Are you a fan of unit test, tdd or bdd
What state management tool do you prefer.
What styling system did you use
Do you have graphql experience
How do you analyze performance of website, how to improve
How do you review pull request, pair programming?
Have you worked with developer from another team, why, how?
how many ticket do you complete for each sprint?
What’s your experience with TypeORM? What’s your thoughts about it?
Who create user story
how do you estimate story point?
How do your team realize problem and improve performance
Have you worked with developer from different timezone
how do you realize and fix a production issue
how do you measure the client side performance of a website
what is your branching strategy
how do you deploy your application, cicd?
Are you familiar with SSO, JWT? how to you maintain login status on client side(cookie, localstorage, redux persist)
How to cache data in react project
Why did you leave your last job
How do you get familiar with the code base quickly when you just joined the team
Do you have a strong opinion of doing things, what would you do if there is another person like you, how do you confront them, how do you get things compromised
How do you deal with ambiguity, such like when design is not done
What’s the most frustrating part of being an engineer
What are you looking for in a job
What’re your favorite and least favorite technologies
What’s your priority of shipping something out and making it perfect? Have you run into any situation that you need to go back and force with the design details
Where do you like to spend your time? Front end/back end/database
What backend experience do you have?
What’s the most complicated front feature you built
Benefits of using SASS?
How to make sure your app is cross browser compatible?
How to make sure your app is accessible?
How do you make your page responsive?