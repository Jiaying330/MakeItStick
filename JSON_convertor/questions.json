[
    {
        "id": 1,
        "problem": "Describe the process when user visit a website",
        "type": "network"
    },
    {
        "id": 2,
        "problem": "What is the purpose of a DNS request?",
        "type": "network"
    },
    {
        "id": 3,
        "problem": "What does TCP ensure during data transmission?",
        "type": "network"
    },
    {
        "id": 4,
        "problem": "What role does IP play in the TCP/IP protocol?",
        "type": "network"
    },
    {
        "id": 5,
        "problem": "What is the main difference between HTTP and HTTPS?",
        "type": "network"
    },
    {
        "id": 6,
        "problem": "Describe the process of an HTTP/HTTPS request and response.",
        "type": "network"
    },
    {
        "id": 7,
        "problem": "What is HTML?",
        "type": "html"
    },
    {
        "id": 8,
        "problem": "What is the basic structure of an HTML document?",
        "type": "html"
    },
    {
        "id": 9,
        "problem": "Differentiate between inline and block elements in HTML",
        "type": "html"
    },
    {
        "id": 10,
        "problem": "What is DOCTYPE!",
        "type": "html"
    },
    {
        "id": 11,
        "problem": "What is semantic html?",
        "type": "html"
    },
    {
        "id": 12,
        "problem": "How do you use svg in html? SVG vs Canvas",
        "type": "html"
    },
    {
        "id": 13,
        "problem": "What is a meta tag?",
        "type": "html"
    },
    {
        "id": 14,
        "problem": "What are some HTML5 new features",
        "type": "html"
    },
    {
        "id": 15,
        "problem": "What is critical rendering path",
        "type": "html"
    },
    {
        "id": 16,
        "problem": "Web components",
        "type": "html"
    },
    {
        "id": 17,
        "problem": "Shadow DOM vs Real DOM vs Virtual DOM",
        "type": "html"
    },
    {
        "id": 18,
        "problem": "JSX vs HTML",
        "type": "html"
    },
    {
        "id": 19,
        "problem": "Image tag",
        "type": "html"
    },
    {
        "id": 20,
        "problem": "Object-fit",
        "type": "html"
    },
    {
        "id": 21,
        "problem": "What is CSS",
        "type": "css"
    },
    {
        "id": 22,
        "problem": "What is the meaning of \u2018Cascading\u2019 in Cascading Style Sheet?",
        "type": "css"
    },
    {
        "id": 23,
        "problem": "Explain Media Queries in CSS",
        "type": "css"
    },
    {
        "id": 24,
        "problem": "Describe the different types of CSS selectors. Provide examples of each.",
        "type": "css"
    },
    {
        "id": 25,
        "problem": "Explain the concept of the cascade in CSS. How does the order of CSS rules affect the styling of elements?",
        "type": "css"
    },
    {
        "id": 26,
        "problem": "Explain box-model in CSS",
        "type": "css"
    },
    {
        "id": 27,
        "problem": "What is the purpose of z-index property in CSS?",
        "type": "css"
    },
    {
        "id": 28,
        "problem": "Explain different ways to display an element at the center of the web page.",
        "type": "css"
    },
    {
        "id": 29,
        "problem": "Compare and contrast the content-box and border-box models. How do they affect the calculation of an element\u2019s dimensions?",
        "type": "css"
    },
    {
        "id": 30,
        "problem": "How are padding and border included in the width and height calculations of an element in each box model?",
        "type": "css"
    },
    {
        "id": 31,
        "problem": "Describe the differences between static, relative, absolute, fixed, and sticky positioning in CSS. Provide examples of when each type would be used.",
        "type": "css"
    },
    {
        "id": 32,
        "problem": "What are pseudo classes and pseudo elements in CSS?",
        "type": "css"
    },
    {
        "id": 33,
        "problem": "Explain the main concepts of Flexbox and Grid layout systems in CSS. How do they differ in terms of use cases?",
        "type": "css"
    },
    {
        "id": 34,
        "problem": "What is the BEM methodology in CSS? How does it help in organizing and maintaining CSS code?",
        "type": "css"
    },
    {
        "id": 35,
        "problem": "Explain what it means that JavaScript is an interpreted language. How does this affect the execution of JavaScript code?",
        "type": "javascript"
    },
    {
        "id": 36,
        "problem": "Describe how JavaScript uses prototypes for inheritance. Provide an example.",
        "type": "javascript"
    },
    {
        "id": 37,
        "problem": "What are first-class functions in JavaScript? How does this feature affect the way functions can be used?",
        "type": "javascript"
    },
    {
        "id": 38,
        "problem": "Compare and contrast var, let, and const in terms of scope, hoisting, redeclaration, and reassignment.",
        "type": "javascript"
    },
    {
        "id": 39,
        "problem": "What are the rules for naming variables in JavaScript?",
        "type": "javascript"
    },
    {
        "id": 40,
        "problem": "List and describe the primitive data types in JavaScript. Provide examples of each.",
        "type": "javascript"
    },
    {
        "id": 41,
        "problem": "What are objects in JavaScript? Provide examples of different types of objects.",
        "type": "javascript"
    },
    {
        "id": 42,
        "problem": "Explain the use of the alert, prompt, and confirm functions. Provide examples of how each can be used.",
        "type": "javascript"
    },
    {
        "id": 43,
        "problem": "Describe null and undefined",
        "type": "javascript"
    },
    {
        "id": 44,
        "problem": "How does type conversion work in JavaScript? What are some common \"falsy\" values?",
        "type": "javascript"
    },
    {
        "id": 45,
        "problem": "Describe how the || (logical OR), && (logical AND), and ?? (nullish coalescing) operators work in JavaScript. Provide examples.",
        "type": "javascript"
    },
    {
        "id": 46,
        "problem": "Compare function declarations, function expressions, and arrow functions. Provide examples of each.",
        "type": "javascript"
    },
    {
        "id": 47,
        "problem": "What are the advantages and disadvantages of using arrow functions?",
        "type": "javascript"
    },
    {
        "id": 48,
        "problem": "What is the event loop in JavaScript? How does it handle asynchronous operations?",
        "type": "javascript"
    },
    {
        "id": 49,
        "problem": "Explain lexical scoping and the scope chain in JavaScript. Provide examples to illustrate how they work.",
        "type": "javascript"
    },
    {
        "id": 50,
        "problem": "What is hoisting in JavaScript? How does it affect the behavior of variables and functions?",
        "type": "javascript"
    },
    {
        "id": 51,
        "problem": "Describe how the this keyword works in different contexts: method calls, simple function calls, arrow functions, and event listeners. Provide examples.",
        "type": "javascript"
    },
    {
        "id": 52,
        "problem": "How do call, apply, and bind methods affect the value of this in JavaScript functions?",
        "type": "javascript"
    },
    {
        "id": 53,
        "problem": "What are some of the key features introduced in ES6 (ECMAScript 2015)?",
        "type": "javascript"
    },
    {
        "id": 54,
        "problem": "Different ways to create objects in JS?",
        "type": "javascript"
    },
    {
        "id": 55,
        "problem": "Different ways to implement class in JS?",
        "type": "javascript"
    },
    {
        "id": 56,
        "problem": "How do classes in ES6 differ from traditional function-based object creation in JavaScript?",
        "type": "javascript"
    },
    {
        "id": 57,
        "problem": "What is a closure in JavaScript? How does it work, and why is it useful? Provide an example.",
        "type": "javascript"
    },
    {
        "id": 58,
        "problem": "How are objects and prototypes used in JavaScript to achieve inheritance? Provide an example.",
        "type": "javascript"
    },
    {
        "id": 59,
        "problem": "Explain the role of the constructor function and class syntax in ES6. How do they facilitate object creation and inheritance?",
        "type": "javascript"
    },
    {
        "id": 60,
        "problem": "Describe the concepts of encapsulation, abstraction, and polymorphism in the context of JavaScript. Provide examples of how each can be implemented.",
        "type": "javascript"
    },
    {
        "id": 61,
        "problem": "What are rest parameters in JavaScript? Provide an example of how they are used.",
        "type": "javascript"
    },
    {
        "id": 62,
        "problem": "Explain how to perform a deep copy of an object in JavaScript. Provide examples using both custom functions and external libraries.",
        "type": "javascript"
    },
    {
        "id": 63,
        "problem": "Difference betweein __proto__, [[Prototype]], and prototype",
        "type": "javascript"
    },
    {
        "id": 64,
        "problem": "What is strict mode",
        "type": "javascript"
    },
    {
        "id": 65,
        "problem": "What are callback functions in JavaScript?",
        "type": "javascript"
    },
    {
        "id": 66,
        "problem": "What is callback hell and how to avoid it?",
        "type": "javascript"
    },
    {
        "id": 67,
        "problem": "Explain Promises in JavaScript.",
        "type": "javascript"
    },
    {
        "id": 68,
        "problem": "How do you handle promises",
        "type": "javascript"
    },
    {
        "id": 69,
        "problem": "How do then, catch, and finally methods work with Promises?",
        "type": "javascript"
    },
    {
        "id": 70,
        "problem": "What is the use of async await in JavaScript?",
        "type": "javascript"
    },
    {
        "id": 71,
        "problem": "Compare then with async await",
        "type": "javascript"
    },
    {
        "id": 72,
        "problem": "Explain Promise.all()",
        "type": "javascript"
    },
    {
        "id": 73,
        "problem": "Explain Promise.allSettled();",
        "type": "javascript"
    },
    {
        "id": 74,
        "problem": "What is the difference between instance methods and static methods?",
        "type": "javascript"
    },
    {
        "id": 75,
        "problem": "How does Javascript handle concurrency?",
        "type": "javascript"
    },
    {
        "id": 76,
        "problem": "What is async/await? How does it differ from using the promise instance methods?",
        "type": "javascript"
    },
    {
        "id": 77,
        "problem": "Can you use await outside of an async function?",
        "type": "javascript"
    },
    {
        "id": 78,
        "problem": "What is callback hell and why is it considered a problem?",
        "type": "javascript"
    },
    {
        "id": 79,
        "problem": "What is TypeScript?",
        "type": "typescript"
    },
    {
        "id": 80,
        "problem": "Why TypeScript?",
        "type": "typescript"
    },
    {
        "id": 81,
        "problem": "What is any type? When to use it?",
        "type": "typescript"
    },
    {
        "id": 82,
        "problem": "What is void type? When to use it?",
        "type": "typescript"
    },
    {
        "id": 83,
        "problem": "What is unknown type? When to use it?",
        "type": "typescript"
    },
    {
        "id": 84,
        "problem": "What is never type? When to use it?",
        "type": "typescript"
    },
    {
        "id": 85,
        "problem": "Provide the syntax for a function with the type annotations",
        "type": "typescript"
    },
    {
        "id": 86,
        "problem": "Provide the syntax for an object with the type annotations",
        "type": "typescript"
    },
    {
        "id": 87,
        "problem": "How to specify optional properties in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 88,
        "problem": "What is enum in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 89,
        "problem": "What is tuple in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 90,
        "problem": "What are type aliases in TypeScript? How do you create one?",
        "type": "typescript"
    },
    {
        "id": 91,
        "problem": "How do you do parameter destructuring?",
        "type": "typescript"
    },
    {
        "id": 92,
        "problem": "What are intersection types in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 93,
        "problem": "What are union types in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 94,
        "problem": "What are abstract classes? When should you use one?",
        "type": "typescript"
    },
    {
        "id": 95,
        "problem": "How to make object properties immutable in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 96,
        "problem": "What is a type declaration file?",
        "type": "typescript"
    },
    {
        "id": 97,
        "problem": "Explain the purpose of the \u201cin\u201d operator",
        "type": "typescript"
    },
    {
        "id": 98,
        "problem": "What is an interface?",
        "type": "typescript"
    },
    {
        "id": 99,
        "problem": "What are the \u201cimplements\u201d clauses in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 100,
        "problem": "What are string literal types?",
        "type": "typescript"
    },
    {
        "id": 101,
        "problem": "What are utility types in TypeScript? List some and explain their usage",
        "type": "typescript"
    },
    {
        "id": 102,
        "problem": "Explain the various ways to control member visibility in TypeScript",
        "type": "typescript"
    },
    {
        "id": 103,
        "problem": "What is type inference?",
        "type": "typescript"
    },
    {
        "id": 104,
        "problem": "What is contextual typing?",
        "type": "typescript"
    },
    {
        "id": 105,
        "problem": "What is Generic in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 106,
        "problem": "What are type assertion in TypeScript?",
        "type": "typescript"
    },
    {
        "id": 107,
        "problem": "What is JSX?",
        "type": "React"
    },
    {
        "id": 108,
        "problem": "What is React virtual dom?",
        "type": "React"
    },
    {
        "id": 109,
        "problem": "What is reconciliation?",
        "type": "React"
    },
    {
        "id": 110,
        "problem": "What is a react element?",
        "type": "React"
    },
    {
        "id": 111,
        "problem": "What is a react component?",
        "type": "React"
    },
    {
        "id": 112,
        "problem": "What is the difference between state and props?",
        "type": "React"
    },
    {
        "id": 113,
        "problem": "What\u2019s the difference between class and function components?",
        "type": "React"
    },
    {
        "id": 114,
        "problem": "How to trigger rerender in a component",
        "type": "React"
    },
    {
        "id": 115,
        "problem": "Why do you like react over other libraries and frameworks?",
        "type": "React"
    },
    {
        "id": 116,
        "problem": "What are higher order components?",
        "type": "React"
    },
    {
        "id": 117,
        "problem": "What are pure components?",
        "type": "React"
    },
    {
        "id": 118,
        "problem": "Advantage of using react hooks?",
        "type": "React"
    },
    {
        "id": 119,
        "problem": "What does the term mounted mean in react?",
        "type": "React"
    },
    {
        "id": 120,
        "problem": "What does useState do?",
        "type": "React"
    },
    {
        "id": 121,
        "problem": "What does useEffect do? What is a dependency array?",
        "type": "React"
    },
    {
        "id": 122,
        "problem": "What is useRef used for? How is it different from useState?",
        "type": "React"
    },
    {
        "id": 123,
        "problem": "What are synthetic events?",
        "type": "React"
    },
    {
        "id": 124,
        "problem": "Can you explain what is the role of reducers?",
        "type": "React"
    },
    {
        "id": 125,
        "problem": "What is react router? How is that different from conventional routing?",
        "type": "React"
    },
    {
        "id": 126,
        "problem": "How do you apply validation on props in react?",
        "type": "React"
    },
    {
        "id": 127,
        "problem": "Controlled component vs uncontrolled component difference?",
        "type": "React"
    },
    {
        "id": 128,
        "problem": "What is prop drilling?",
        "type": "React"
    },
    {
        "id": 129,
        "problem": "Any limitations that you have with react?",
        "type": "React"
    },
    {
        "id": 130,
        "problem": "React_Performance",
        "type": "React"
    },
    {
        "id": 131,
        "problem": "What does React.memo do? How do we use it?",
        "type": "React"
    },
    {
        "id": 132,
        "problem": "What is React.PureComponent",
        "type": "React"
    },
    {
        "id": 133,
        "problem": "How to prevent components from unnecessary rerendering?",
        "type": "React"
    },
    {
        "id": 134,
        "problem": "What is code splitting and lazy loading?",
        "type": "React"
    },
    {
        "id": 135,
        "problem": "What is server side rendering?",
        "type": "React"
    },
    {
        "id": 136,
        "problem": "Others: responsive images, remove unused css, prefetching",
        "type": "React"
    },
    {
        "id": 137,
        "problem": "Why do we use redux?",
        "type": "Redux"
    },
    {
        "id": 138,
        "problem": "Difference between redux and useContext API?",
        "type": "Redux"
    },
    {
        "id": 139,
        "problem": "What is the store?",
        "type": "Redux"
    },
    {
        "id": 140,
        "problem": "What is a reducer?",
        "type": "Redux"
    },
    {
        "id": 141,
        "problem": "What is dispatch?",
        "type": "Redux"
    },
    {
        "id": 142,
        "problem": "What is the flux pattern?",
        "type": "Redux"
    },
    {
        "id": 143,
        "problem": "How do you use the state from redux? (class & func)",
        "type": "Redux"
    },
    {
        "id": 144,
        "problem": "What is redux middleware?",
        "type": "Redux"
    },
    {
        "id": 145,
        "problem": "have you participated in initiation of a project (techstack, boilerplate, goal analysis, stakeholder)",
        "type": "Behavioral"
    },
    {
        "id": 146,
        "problem": "how do you manage restful api connection",
        "type": "Behavioral"
    },
    {
        "id": 147,
        "problem": "Do you prefer typescript or javascript, why?",
        "type": "Behavioral"
    },
    {
        "id": 148,
        "problem": "Are you a fan of unit test, tdd or bdd",
        "type": "Behavioral"
    },
    {
        "id": 149,
        "problem": "What state management tool do you prefer.",
        "type": "Behavioral"
    },
    {
        "id": 150,
        "problem": "What styling system did you use",
        "type": "Behavioral"
    },
    {
        "id": 151,
        "problem": "Do you have graphql experience",
        "type": "Behavioral"
    },
    {
        "id": 152,
        "problem": "How do you analyze performance of website, how to improve",
        "type": "Behavioral"
    },
    {
        "id": 153,
        "problem": "How do you review pull request, pair programming?",
        "type": "Behavioral"
    },
    {
        "id": 154,
        "problem": "Have you worked with developer from another team, why, how?",
        "type": "Behavioral"
    },
    {
        "id": 155,
        "problem": "how many ticket do you complete for each sprint?",
        "type": "Behavioral"
    },
    {
        "id": 156,
        "problem": "What\u2019s your experience with TypeORM? What\u2019s your thoughts about it?",
        "type": "Behavioral"
    },
    {
        "id": 157,
        "problem": "Who create user story",
        "type": "Behavioral"
    },
    {
        "id": 158,
        "problem": "how do you estimate story point?",
        "type": "Behavioral"
    },
    {
        "id": 159,
        "problem": "How do your team realize problem and improve performance",
        "type": "Behavioral"
    },
    {
        "id": 160,
        "problem": "Have you worked with developer from different timezone",
        "type": "Behavioral"
    },
    {
        "id": 161,
        "problem": "how do you realize and fix a production issue",
        "type": "Behavioral"
    },
    {
        "id": 162,
        "problem": "how do you measure the client side performance of a website",
        "type": "Behavioral"
    },
    {
        "id": 163,
        "problem": "what is your branching strategy",
        "type": "Behavioral"
    },
    {
        "id": 164,
        "problem": "how do you deploy your application, cicd?",
        "type": "Behavioral"
    },
    {
        "id": 165,
        "problem": "Are you familiar with SSO, JWT? how to you maintain login status on client side(cookie, localstorage, redux persist)",
        "type": "Behavioral"
    },
    {
        "id": 166,
        "problem": "How to cache data in react project",
        "type": "Behavioral"
    },
    {
        "id": 167,
        "problem": "Why did you leave your last job",
        "type": "Behavioral"
    },
    {
        "id": 168,
        "problem": "How do you get familiar with the code base quickly when you just joined the team",
        "type": "Behavioral"
    },
    {
        "id": 169,
        "problem": "Do you have a strong opinion of doing things, what would you do if there is another person like you, how do you confront them, how do you get things compromised",
        "type": "Behavioral"
    },
    {
        "id": 170,
        "problem": "How do you deal with ambiguity, such like when design is not done",
        "type": "Behavioral"
    },
    {
        "id": 171,
        "problem": "What\u2019s the most frustrating part of being an engineer",
        "type": "Behavioral"
    },
    {
        "id": 172,
        "problem": "What are you looking for in a job",
        "type": "Behavioral"
    },
    {
        "id": 173,
        "problem": "What\u2019re your favorite and least favorite technologies",
        "type": "Behavioral"
    },
    {
        "id": 174,
        "problem": "What\u2019s your priority of shipping something out and making it perfect? Have you run into any situation that you need to go back and force with the design details",
        "type": "Behavioral"
    },
    {
        "id": 175,
        "problem": "Where do you like to spend your time? Front end/back end/database",
        "type": "Behavioral"
    },
    {
        "id": 176,
        "problem": "What backend experience do you have?",
        "type": "Behavioral"
    },
    {
        "id": 177,
        "problem": "What\u2019s the most complicated front feature you built",
        "type": "Behavioral"
    },
    {
        "id": 178,
        "problem": "Do you have any questions: questions based on their introduction and questions they asked.",
        "type": "Behavioral"
    }
]